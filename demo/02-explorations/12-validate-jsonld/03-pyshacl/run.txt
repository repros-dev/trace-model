=============================== bash cell | validate tro declaration with pyshacl (without comments) ===============================

python3 << END_PYTHON

# It allows any number of comments for each TRO
from pyshacl import validate

tro_jsonld = """
{
    "@context": [{
        "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
        "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
        "trov": "https://w3id.org/trace/2023/05/trov#",
        "@base": "https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/"
    }],
    
    "@graph": [
        { "@id": "tro", "@type": "trov:TransparentResearchObject" }
    ]
}
"""

with open("data/tro.schema.ttl") as fin:
    tro_schema = fin.read()

r = validate(data_graph=tro_jsonld,
      shacl_graph=tro_schema,
      data_graph_format="json-ld",
      inference='rdfs',
      debug=True)
conforms, results_graph, results_text = r

print("results_text: ", results_text)

END_PYTHON

----------------------------------------------------------- cell outputs -----------------------------------------------------------
results_text:  Validation Report
Conforms: True

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


=============================== bash cell | validate tro declaration with pyshacl (multiple trs pk) ================================

python3 << END_PYTHON

from pyshacl import validate

tro_jsonld = """
{
    "@context": [{
        "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
        "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
        "trov": "https://w3id.org/trace/2023/05/trov#",
        "@base": "https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/"
    }],
    
    "@graph": [
        { "@id": "trs", "@type": "trov:TrustedResearchSystem" },
        { "@id": "trs", "trov:publicKey": "trs.pk.1" },
        { "@id": "trs", "trov:publicKey": "trs.pk.2" }
    ]
}
"""

with open("data/tro.schema.ttl") as fin:
    tro_schema = fin.read()

r = validate(data_graph=tro_jsonld,
      shacl_graph=tro_schema,
      data_graph_format="json-ld",
      inference='rdfs',
      debug=True)
conforms, results_graph, results_text = r

print("results_text: ", results_text)

END_PYTHON

----------------------------------------------------------- cell outputs -----------------------------------------------------------
results_text:  Validation Report
Conforms: False
Results (1):
Constraint Violation in MaxCountConstraintComponent (http://www.w3.org/ns/shacl#MaxCountConstraintComponent):
	Severity: sh:Violation
	Source Shape: [ sh:datatype xsd:string ; sh:maxCount Literal("1", datatype=xsd:integer) ; sh:minCount Literal("1", datatype=xsd:integer) ; sh:path trov:publicKey ]
	Focus Node: <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/trs>
	Result Path: trov:publicKey
	Message: More than 1 values on <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/trs>->trov:publicKey

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


=============================== bash cell | validate tro declaration with pyshacl (multiple tsa pk) ================================

python3 << END_PYTHON

from pyshacl import validate

tro_jsonld = """
{
    "@context": [{
        "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
        "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
        "trov": "https://w3id.org/trace/2023/05/trov#",
        "@base": "https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/"
    }],
    
    "@graph": [{
        "@id": "tsa", "@type": "trov:TimeStampingAuthority" },
        { "@id": "tsa", "trov:publicKey": "tsa.pk.1" },
        { "@id": "tsa", "trov:publicKey": "tsa.pk.2" }
    ]
}
"""

with open("data/tro.schema.ttl") as fin:
    tro_schema = fin.read()

r = validate(data_graph=tro_jsonld,
      shacl_graph=tro_schema,
      data_graph_format="json-ld",
      inference='rdfs',
      debug=True)
conforms, results_graph, results_text = r

print("results_text: ", results_text)

END_PYTHON

----------------------------------------------------------- cell outputs -----------------------------------------------------------
results_text:  Validation Report
Conforms: False
Results (1):
Constraint Violation in MaxCountConstraintComponent (http://www.w3.org/ns/shacl#MaxCountConstraintComponent):
	Severity: sh:Violation
	Source Shape: [ sh:datatype xsd:string ; sh:maxCount Literal("1", datatype=xsd:integer) ; sh:minCount Literal("1", datatype=xsd:integer) ; sh:path trov:publicKey ]
	Focus Node: <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/tsa>
	Result Path: trov:publicKey
	Message: More than 1 values on <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/tsa>->trov:publicKey

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


==================== bash cell | validate tro declaration with pyshacl (multiple fingerprints per composition) =====================

python3 << END_PYTHON

from pyshacl import validate

tro_jsonld = """
{
    "@context": [{
        "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
        "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
        "trov": "https://w3id.org/trace/2023/05/trov#",
        "@base": "https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/"
    }],
    
    "@graph": [{
        "trov:hasComposition":
        {
            "@id": "composition/1",
            "@type": "trov:ArtifactComposition",
        
             "trov:hasFingerprint":
            {
                "@id": "fp1",
                "@type": "trov:CompositionFingerprint",
                "trov:sha256": "sha256.fp1"
            }
        }
    },
    {
        "@id": "composition/1", 
        "trov:hasFingerprint": {
            "@id": "fp2",
            "trov:sha256": "sha256.fp2"
        }
    }]
}
"""

with open("data/tro.schema.ttl") as fin:
    tro_schema = fin.read()

r = validate(data_graph=tro_jsonld,
      shacl_graph=tro_schema,
      data_graph_format="json-ld",
      inference='rdfs',
      debug=True)
conforms, results_graph, results_text = r

print("results_text: ", results_text)

END_PYTHON

----------------------------------------------------------- cell outputs -----------------------------------------------------------
results_text:  Validation Report
Conforms: False
Results (2):
Constraint Violation in MaxCountConstraintComponent (http://www.w3.org/ns/shacl#MaxCountConstraintComponent):
	Severity: sh:Violation
	Source Shape: [ sh:maxCount Literal("1", datatype=xsd:integer) ; sh:minCount Literal("1", datatype=xsd:integer) ; sh:node schema1:FingerprintShape ; sh:path trov:hasFingerprint ]
	Focus Node: <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/composition/1>
	Result Path: trov:hasFingerprint
	Message: More than 1 values on <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/composition/1>->trov:hasFingerprint
Constraint Violation in MinCountConstraintComponent (http://www.w3.org/ns/shacl#MinCountConstraintComponent):
	Severity: sh:Violation
	Source Shape: [ sh:minCount Literal("1", datatype=xsd:integer) ; sh:node schema1:ArtifactShape ; sh:path trov:hasArtifact ]
	Focus Node: <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/composition/1>
	Result Path: trov:hasArtifact
	Message: Less than 1 values on <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/composition/1>->trov:hasArtifact

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


======================= bash cell | validate tro declaration with pyshacl (multiple sha256 per fingerprint) ========================

python3 << END_PYTHON

from pyshacl import validate

tro_jsonld = """
{
    "@context": [{
        "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
        "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
        "trov": "https://w3id.org/trace/2023/05/trov#",
        "@base": "https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/"
    }],
    
    "@graph": [{
        "trov:hasComposition":
        {
            "@id": "composition/1",
            "@type": "trov:ArtifactComposition",
        
            "trov:hasFingerprint":
            {
                "@id": "fp1",
                "@type": "trov:CompositionFingerprint",
                "trov:sha256": "sha256.fp1"
            }
        }
    },
    { "@id": "fp1", "trov:sha256": "sha256.fp2" }
    ]
}
"""

with open("data/tro.schema.ttl") as fin:
    tro_schema = fin.read()

r = validate(data_graph=tro_jsonld,
      shacl_graph=tro_schema,
      data_graph_format="json-ld",
      inference='rdfs',
      debug=True)
conforms, results_graph, results_text = r

print("results_text: ", results_text)

END_PYTHON

----------------------------------------------------------- cell outputs -----------------------------------------------------------
results_text:  Validation Report
Conforms: False
Results (3):
Constraint Violation in MaxCountConstraintComponent (http://www.w3.org/ns/shacl#MaxCountConstraintComponent):
	Severity: sh:Violation
	Source Shape: [ sh:datatype xsd:string ; sh:maxCount Literal("1", datatype=xsd:integer) ; sh:message Literal("*** Each fingerprint should have EXACTLY ONE sha256 with String format ***") ; sh:minCount Literal("1", datatype=xsd:integer) ; sh:path trov:sha256 ]
	Focus Node: <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/fp1>
	Result Path: trov:sha256
	Message: *** Each fingerprint should have EXACTLY ONE sha256 with String format ***
Constraint Violation in NodeConstraintComponent (http://www.w3.org/ns/shacl#NodeConstraintComponent):
	Severity: sh:Violation
	Source Shape: [ sh:maxCount Literal("1", datatype=xsd:integer) ; sh:minCount Literal("1", datatype=xsd:integer) ; sh:node schema1:FingerprintShape ; sh:path trov:hasFingerprint ]
	Focus Node: <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/composition/1>
	Value Node: <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/fp1>
	Result Path: trov:hasFingerprint
	Message: Value does not conform to Shape schema1:FingerprintShape
Constraint Violation in MinCountConstraintComponent (http://www.w3.org/ns/shacl#MinCountConstraintComponent):
	Severity: sh:Violation
	Source Shape: [ sh:minCount Literal("1", datatype=xsd:integer) ; sh:node schema1:ArtifactShape ; sh:path trov:hasArtifact ]
	Focus Node: <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/composition/1>
	Result Path: trov:hasArtifact
	Message: Less than 1 values on <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/composition/1>->trov:hasArtifact

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


==================== bash cell | validate tro declaration with pyshacl (composition with at least one artifact) ====================

python3 << END_PYTHON

from pyshacl import validate

tro_jsonld = """
{
    "@context": [{
        "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
        "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
        "trov": "https://w3id.org/trace/2023/05/trov#",
        "@base": "https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/"
    }],
    
    "@graph": [{
        "trov:hasComposition": [
        {
            "@id": "composition/1",
            "@type": "trov:ArtifactComposition",

            "trov:hasFingerprint":
            {
                "@id": "fp1",
                "@type": "trov:CompositionFingerprint",
                "trov:sha256": "sha256.fp1"
            },

            "trov:hasArtifact": [
            {
                "@id": "composition/1/artifact/1",
                "@type": "trov:ResearchArtifact",
                "trov:mimeType": "text/plain",
                "trov:sha256": "art.sha256.1"
            }]
        },
        { 
            "@id": "composition/2", 
            "@type": "trov:ArtifactComposition",
          
            "trov:hasFingerprint":
            {
                "@id": "fp2",
                "@type": "trov:CompositionFingerprint",
                "trov:sha256": "sha256.fp2"
            }
        }]
    }]
}
"""

with open("data/tro.schema.ttl") as fin:
    tro_schema = fin.read()

r = validate(data_graph=tro_jsonld,
      shacl_graph=tro_schema,
      data_graph_format="json-ld",
      inference='rdfs',
      debug=True)
conforms, results_graph, results_text = r

print(results_text)

END_PYTHON

----------------------------------------------------------- cell outputs -----------------------------------------------------------
Validation Report
Conforms: False
Results (1):
Constraint Violation in MinCountConstraintComponent (http://www.w3.org/ns/shacl#MinCountConstraintComponent):
	Severity: sh:Violation
	Source Shape: [ sh:minCount Literal("1", datatype=xsd:integer) ; sh:node schema1:ArtifactShape ; sh:path trov:hasArtifact ]
	Focus Node: <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/composition/2>
	Result Path: trov:hasArtifact
	Message: Less than 1 values on <https://github.com/transparency-certified/trace-model/tree/master/demo/01-trov-examples/01-two-artifacts-no-trp/composition/2>->trov:hasArtifact

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


