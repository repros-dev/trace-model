======================================= bash cell | delete the gnupg home directory and keys =======================================
# delete contents of GnuPG home directory for this REPRO
gnupg-runtime.purge-keys
----------------------------------------------------------- cell outputs -----------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


=============================================== bash cell | tar the data dir content ===============================================

tar -czvf products/message.tar.gz data/message

----------------------------------------------------------- cell outputs -----------------------------------------------------------
data/message/
data/message/bar.txt
data/message/foo.txt
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


================================== bash cell | create tro manifest containing the digest of data ===================================
python3 << END_PYTHON
from hashlib import sha256
import json
with open("products/message.tar.gz", "rb") as fin:
    digest = sha256(fin.read()).hexdigest()
fout = open("products/tro.jsonld", mode="w", encoding="utf-8")
jsonld_content = {
    "@context": [{
        "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
        "trov": "https://w3id.org/trace/2022/10/trov#"
    }],

    "@graph": [{

        "@id": "trov:tro/01",
        "@type": "trov:ResearchObject",

        "trov:generatedBySystem": { "@id": "trov:system/01" },
        "trov:digest": digest,
        "trov:troFilePath": "products/message.tar.gz"
    }]
}
json.dump(jsonld_content, fout, indent=4)

fout.close()
END_PYTHON
cat products/tro.jsonld
----------------------------------------------------------- cell outputs -----------------------------------------------------------
{
    "@context": [
        {
            "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
            "trov": "https://w3id.org/trace/2022/10/trov#"
        }
    ],
    "@graph": [
        {
            "@id": "trov:tro/01",
            "@type": "trov:ResearchObject",
            "trov:generatedBySystem": {
                "@id": "trov:system/01"
            },
            "trov:digest": "8d6cd7fd0aba36671b899a72f15eed84c74cd5ab3ebdd49eb084957984cde1fe",
            "trov:troFilePath": "products/message.tar.gz"
        }
    ]
}^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


===================================== bash cell | import the private key for repro@repros.dev ======================================
python3 << END_PYTHON
import gnupg
# read the private key from the file
with open("data/private.asc", "r") as private_key_file:
    private_key_text = private_key_file.read()
# import the private key and trust it
gpg = gnupg.GPG()
gpg.import_keys(private_key_text)
gpg.trust_keys('BD4CA7A2E41893A79420976235AAF11171DB78A7', 'TRUST_ULTIMATE')
END_PYTHON
----------------------------------------------------------- cell outputs -----------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


==================================== bash cell | list the imported public key using the gpg cli ====================================
echo Public keys:
echo
gpg --list-keys
echo
echo Private keys:
echo
gpg --list-secret-keys
echo
----------------------------------------------------------- cell outputs -----------------------------------------------------------
Public keys:

/mnt/trace-model/.gnupg-runtime/.gnupg/pubring.kbx
--------------------------------------------------
pub   rsa1024 2023-03-30 [SCEA]
      BD4CA7A2E41893A79420976235AAF11171DB78A7
uid           [ultimate] repro user <repro@repros.dev>


Private keys:

/mnt/trace-model/.gnupg-runtime/.gnupg/pubring.kbx
--------------------------------------------------
sec   rsa1024 2023-03-30 [SCEA]
      BD4CA7A2E41893A79420976235AAF11171DB78A7
uid           [ultimate] repro user <repro@repros.dev>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


========================== bash cell | sign and verify the tro.jsonld for repro@repros.dev (detach=True) ===========================
python3 << END_PYTHON
import gnupg
# Read the message from the file
with open("products/tro.jsonld", "r") as tro_jsonld_file:
    tro_jsonld_text = bytes(tro_jsonld_file.read(), "utf-8")
# Sign the message with the private key
gpg = gnupg.GPG()
signed_text = gpg.sign(tro_jsonld_text, keyid="repro@repros.dev", passphrase="repro", detach=True)
# Write the signed message to a file
with open("tmp/signature.asc", "w") as text_file:
    text_file.write(str(signed_text))
verified = gpg.verify_data("tmp/signature.asc", tro_jsonld_text)
if not verified: 
    raise ValueError("Signature could not be verified!")
else:
    print("Signature has been verified successfully!")
END_PYTHON
----------------------------------------------------------- cell outputs -----------------------------------------------------------
Signature has been verified successfully!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


