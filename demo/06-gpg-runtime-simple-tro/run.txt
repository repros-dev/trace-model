============================================= bash cell | delete gnupg home directory ==============================================
# delete contents of the .gnupg directory for this REPRO
gnupg-runtime.purge-keys
----------------------------------------------------------- cell outputs -----------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


=============================================== bash cell | tar the data dir content ===============================================

tar -czvf products/message.tar.gz data/message

----------------------------------------------------------- cell outputs -----------------------------------------------------------
data/message/
data/message/bar.txt
data/message/foo.txt
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


================================= bash cell | create tro certificate containing the digest of data =================================

# Create tro.jsonld
cat > products/tro.jsonld << EOF
{
    "@context": [{
        "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
        "trov": "https://w3id.org/trace/2022/10/trov#"
    }],

    "@graph": [{

        "@id": "trov:tro/01",
        "@type": "trov:ResearchObject",

        "trov:generatedBySystem": { "@id": "trov:system/01" },
        "trov:digest": "411b552d5b2eb9daa01515ff0d22d2001c2e0dde",
        "trov:troFilePath": "products/message.tar.gz"
    }]
}
EOF

----------------------------------------------------------- cell outputs -----------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


==================================================== bash cell | import jsonld =====================================================

# Import TRO as JSON-LD and export as N-TRIPLES
geist destroy --dataset kb --quiet
geist create --dataset kb --infer owl --quiet
geist import --format jsonld --file products/tro.jsonld

----------------------------------------------------------- cell outputs -----------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


======================================== bash cell | create a tmp file to verify the digest ========================================

# Note: there must be exactly two spaces between the hash and the file path
DIGEST_FILE=products/digest.txt
geist report > ${DIGEST_FILE} << 'END_TEMPLATE'
    {{ prefix "trov" "https://w3id.org/trace/2022/10/trov#" }}             \
                                                                           \
    {{ range $Digest := select '''
        SELECT DISTINCT ?hash ?filePath
        WHERE {
            ?tro   trov:digest  ?hash .
            ?tro   trov:troFilePath ?filePath .
        }                                                                   \
        ''' | rows }}                                                       \
                                                                             \
        {{ index $Digest 0 }}  {{ index $Digest 1 }}                          \
    {{ end }}                                                                
END_TEMPLATE
cat ${DIGEST_FILE}
----------------------------------------------------------- cell outputs -----------------------------------------------------------
411b552d5b2eb9daa01515ff0d22d2001c2e0dde  products/message.tar.gz
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


============================================ bash cell | verify the digest using shasum ============================================

shasum -c products/digest.txt

----------------------------------------------------------- cell outputs -----------------------------------------------------------
products/message.tar.gz: OK
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


===================================== bash cell | import the private key for repro@repros.dev ======================================
# delete contents of the .gnupg directory for this REPRO
gnupg-runtime.purge-keys
# import the private key file
gpg --import --pinentry-mode loopback --passphrase=repro data/private.asc 2>&1
echo
# list the gpg keys
gpg --list-keys
----------------------------------------------------------- cell outputs -----------------------------------------------------------
gpg: directory '/mnt/trace-model/.gnupg-runtime/.gnupg' created
gpg: keybox '/mnt/trace-model/.gnupg-runtime/.gnupg/pubring.kbx' created
gpg: /mnt/trace-model/.gnupg-runtime/.gnupg/trustdb.gpg: trustdb created
gpg: key 35AAF11171DB78A7: public key "repro user <repro@repros.dev>" imported
gpg: key 35AAF11171DB78A7: secret key imported
gpg: Total number processed: 1
gpg:               imported: 1
gpg:       secret keys read: 1
gpg:   secret keys imported: 1

/mnt/trace-model/.gnupg-runtime/.gnupg/pubring.kbx
--------------------------------------------------
pub   rsa1024 2023-03-30 [SCEA]
      BD4CA7A2E41893A79420976235AAF11171DB78A7
uid           [ unknown] repro user <repro@repros.dev>

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


==================================== bash cell | sign the tro.jsonld file with the private key =====================================

rm -f tmp/signature.asc
gpg --detach-sign --local-user repro@repros.dev     --pinentry-mode loopback --passphrase=repro     -a -o tmp/signature.asc                 products/tro.jsonld 2>&1
gnupg-runtime.redact-key tmp/signature.asc

----------------------------------------------------------- cell outputs -----------------------------------------------------------
-----BEGIN PGP SIGNATURE-----

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxx
xxxxx
-----END PGP SIGNATURE-----
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


======================================= bash cell | verify the signature with the public key =======================================

gpg -v --verify tmp/signature.asc products/tro.jsonld 2>&1 | tail -6

----------------------------------------------------------- cell outputs -----------------------------------------------------------
gpg: using pgp trust model
gpg: Good signature from "repro user <repro@repros.dev>" [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: BD4C A7A2 E418 93A7 9420  9762 35AA F111 71DB 78A7
gpg: binary signature, digest algorithm SHA512, key algorithm rsa1024
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


